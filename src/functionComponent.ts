import { BiDirectionLinkedList, BiDirectionLinkedListNode } from './BiDirectionLinkedList';
import { CrossList as CL, CrossListNode } from './CrossLinkedList';
import { MemoryPool } from './MemoryPool';

// accessing a Module Symbol has overhead
const CrossList = CL;

export interface ViewGenerator<TData extends any[] = any[], TView = {}> {
    create?(data: TData, parent: TView): TView | undefined;
    update?(data: TData, view: TView): TView | undefined;
    dispose?(view: TView): void;
    render?(data: TData): void;
}

interface IFunctionComponent<TData extends any[] = any[], TView = {}> {
    (...data: TData): void;
    vg: ViewGenerator<TData, TView>;
}

interface StackNode extends CrossListNode, BiDirectionLinkedListNode {
    f: IFunctionComponent;
    /**
     * isUpdated
     */
    // u?: boolean;
    /**
     * view generated by ViewGenerator
     */
    v?: any;
}

function disposeNode(node: StackNode) {
    // if (node.u !== true) {
    if (node.f.vg.dispose !== undefined) {
        node.f.vg.dispose(node.v);
    }
    // }
    // node.c = undefined;
    // node.nS = undefined;
    // node.u = false;
    // node.v = undefined;
    memoryPool.put(node);
}

function removeFromLastListAndDispose(node: StackNode) {
    lastList!.delete(node);
    disposeNode(node);
}

// the variables shared by all function calls of a root
let lastCallStack: StackNode | undefined;
let lastList: BiDirectionLinkedList<StackNode> | undefined;
let currentCallStack: StackNode | undefined;
let currentList: BiDirectionLinkedList<StackNode> | undefined;

let memoryPool: MemoryPool;

let isInRoot = false;
// root variables definition end

// the variables shared inside a layer of a subtree
let parentView: any | undefined;

let parentInCurrentCallStack: StackNode | undefined;

let preSiblingInCurrentCallStack: StackNode | undefined;

let lastNode: StackNode | undefined;
// subtree layer variables definition end

export function toFunctionComponent<TData extends any[], TView = {}>(vg: ViewGenerator<TData, TView>): (...data: TData) => void {
    function functionComponent() {
        const data = arguments as any as TData;
        if (isInRoot === undefined) {
            throw new Error(
                `A function component should be wrapped inside a Root (use getRoot())`
            );
        }
        const currentFn = functionComponent as IFunctionComponent<TData, TView>;
        let currentNode: StackNode;

        let lastFn: IFunctionComponent;
        let lastNodeNextSibling: StackNode | undefined;
        let lastNodeChild: StackNode | undefined;

        if (lastNode !== undefined) {
            lastFn = lastNode.f;
            lastNodeNextSibling = lastNode.nS;
            lastNodeChild = lastNode.c;

            currentNode = lastNode;
        } else {
            currentNode = memoryPool.get();
        }

        let isLastNodeDestroyed = false;

        if (lastFn! === currentFn) {
            // update
            if (vg.update !== undefined) {
                const view = vg.update(data, lastNode!.v);
                if (view !== currentNode.v) {
                    currentNode.v = view;
                }
            }
            // mark the node is updated, so don't dispose the view when tearing down the tree
            lastList!.delete(lastNode!);
        } else if (lastFn! === undefined) {
            // create current view
            if (vg.create !== undefined) {
                currentNode.v = vg.create(data, parentView);
            }
            currentNode.f = currentFn;
        } else {
            // dispose last view and create current view
            if (lastFn!.vg.dispose !== undefined) {
                CrossList.walk(lastNode!, removeFromLastListAndDispose);
                // the node is completely gone and we'll take it never existed before
                isLastNodeDestroyed = true;
            }

            // create current view
            if (vg.create !== undefined) {
                currentNode.v = vg.create(data, parentView);
            }
            currentNode.f = currentFn;
        }
        
        if (currentCallStack !== undefined) {
            // add the currentNode to the currentCallStack
            CrossList.add(currentNode, parentInCurrentCallStack!, preSiblingInCurrentCallStack);
        } else {
            // create currentStack
            currentCallStack = currentNode;
        }

        currentList!.add(currentNode);

        /** set the layer variables */
        // tell the next sibling, the pre sibling is me
        preSiblingInCurrentCallStack = currentNode;
        lastNode = lastNodeNextSibling;
        /** done setting the layer variables */

        // done with the node, now for the children

        if (currentFn.vg.render !== undefined) {
            const parentViewBackup = parentView;
            const parentInCurrentCallStackBackup = parentInCurrentCallStack;
            const preSiblingInCurrentCallStackBackup = preSiblingInCurrentCallStack;
            const lastNodeBackup = lastNode;
    
            const view = currentNode.v;
            if (view !== undefined) {
                parentView = view;
            }
    
            parentInCurrentCallStack = currentNode;
            
            preSiblingInCurrentCallStack = undefined;

            if (isLastNodeDestroyed === true) {
                lastNode = undefined;
            } else {
                lastNode = lastNodeChild;
            }
    
            // !!!children enter!!!
            currentFn.vg.render(data);
            // !!!children done!!!
            
            if (preSiblingInCurrentCallStack !== undefined) {
                preSiblingInCurrentCallStack!.nS = undefined;
            }

            parentView = parentViewBackup;
            parentInCurrentCallStack = parentInCurrentCallStackBackup;
            preSiblingInCurrentCallStack = preSiblingInCurrentCallStackBackup;
            lastNode = lastNodeBackup;
        } else {
            currentNode.c = undefined;
        }
    }

    const f = functionComponent as IFunctionComponent<TData, TView>;
    f.vg = vg;
    return f;
}

function createStackNode() {
    return ({
        //
    });
}

export function getRoot<T>(rootView: T) {
    let cachedLastStack: StackNode | undefined;
    let cachedLastList = new BiDirectionLinkedList<StackNode>();
    let cachedCurrentStack: StackNode | undefined;
    let cachedCurrentList = new BiDirectionLinkedList<StackNode>();
    const cachedMemoryPool = new MemoryPool(createStackNode);

    return function Root(child: Function) {
        lastCallStack = cachedLastStack;
        lastNode = lastCallStack;
        lastList = cachedLastList;

        currentCallStack = cachedCurrentStack;
        currentList = cachedCurrentList;
        currentList.reset();
        parentInCurrentCallStack = undefined;
        preSiblingInCurrentCallStack = undefined;

        parentView = rootView;

        memoryPool = cachedMemoryPool;
        
        isInRoot = true;
        child();
        isInRoot = false;
        
        if (preSiblingInCurrentCallStack !== undefined) {
            preSiblingInCurrentCallStack!.nS = undefined;
        }

        lastList.walk(disposeNode);
                
        lastCallStack = undefined;

        // swap the two list
        cachedCurrentStack = lastCallStack;
        cachedLastStack = currentCallStack;
        
        // swap the two list
        cachedCurrentList = lastList;
        cachedLastList = currentList;

        parentView = undefined;
    };
}
